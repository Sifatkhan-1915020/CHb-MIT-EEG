import mne
import numpy as np
from sklearn.cross_decomposition import CCA
import matplotlib.pyplot as plt

# Load EDF files
non_file = "chb02/extraction1/non_16_after.edf"
seizure_file = "chb02/extraction1/seizure_16.edf"

# Read the EEG data
non_raw = mne.io.read_raw_edf(non_file, preload=True)
seizure_raw = mne.io.read_raw_edf(seizure_file, preload=True)

# Get the EEG data (removing extra channels like annotations if present)
non_data = non_raw.get_data()
seizure_data = seizure_raw.get_data()

# Ensure the data has the same number of channels and length
min_channels = min(non_data.shape[0], seizure_data.shape[0])  # Minimum channels
min_samples = min(non_data.shape[1], seizure_data.shape[1])  # Minimum samples
non_data = non_data[:min_channels, :min_samples]
seizure_data = seizure_data[:min_channels, :min_samples]

# Transpose the data for CCA (samples x channels)
non_data = non_data.T
seizure_data = seizure_data.T

# Perform Canonical Correlation Analysis (CCA)
cca = CCA(n_components=min_channels)  # Number of components = number of channels
non_transformed, seizure_transformed = cca.fit_transform(non_data, seizure_data)

# Get the canonical correlations
canonical_correlations = [np.corrcoef(non_transformed[:, i], seizure_transformed[:, i])[0, 1] for i in range(min_channels)]

# Get channel names for the x-axis
channel_names = non_raw.ch_names[:min_channels]

# Combine channel names and canonical correlation scores
channel_scores = list(zip(channel_names, canonical_correlations))

# Sort channels by correlation score in ascending order
sorted_channels = sorted(channel_scores, key=lambda x: x[1])

# Print the lowest 10 channels with their scores
print("Lowest 10 Channels with Scores:")
for channel, score in sorted_channels[:10]:
    print(f"{channel}: {score:.4f}")

# Plot the canonical correlations
plt.figure(figsize=(12, 6))
plt.bar(channel_names, canonical_correlations, color='blue')
plt.xlabel("Channels", fontsize=14)
plt.ylabel("Canonical Correlation", fontsize=14)
plt.title("Canonical Correlation Between non3.edf and seizure3.edf", fontsize=16)
plt.xticks(rotation=45, ha='right')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()
